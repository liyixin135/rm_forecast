PACKAGE = "rm_forecast"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# select_bar = gen.enum([gen.const("Pass", int_t, 0, "Pass"),
#                        gen.const("Select", int_t, 1, "Select")], "type")

gen.add("max_match_distance", double_t, 0, "", 0.2, 0, 5)
gen.add("tracking_threshold", int_t, 0, "", 5, 0, 400)
gen.add("lost_threshold", int_t, 0, "", 5, 0, 15)

gen.add("is_reproject", bool_t, 0, "", False)
gen.add("is_prev_reproject", bool_t, 0, "", False)

gen.add("is_clockwise", bool_t, 0, "", True)
gen.add("fan_length", double_t, 0, "", 0.75, 0, 2)
gen.add("target_length", double_t, 0, "", 0.123, 0, 2)
gen.add("target_width", double_t, 0, "", 0.06, 0, 2)
gen.add("angular_velocity", double_t, 0, "", 0.7, 0, 5)
gen.add("delay_time", double_t, 0, "", 0.4, 0, 5)
gen.add("speed_threshold", double_t, 0, "", 1.3, 0, 3)
gen.add("high_acceleration_coefficient", double_t, 0, "", 1, 0, 10)
gen.add("low_acceleration_coefficient", double_t, 0, "", 1, 0, 10)
gen.add("high_acceleration_offset", double_t, 0, "", 0, -2, 2)
gen.add("low_acceleration_offset", double_t, 0, "", 0, -2, 2)
gen.add("skip_frame_threshold", double_t, 0, "", 5, 0, 10)

# gen.add("is_filter_readied", bool_t, 0, "", False)
# gen.add("min_lw_ratio", double_t, 0, "", 2.4, 0, 4)

gen.add("is_static", bool_t, 0, "", False)

exit(gen.generate(PACKAGE, "rm_forecast", "Forecast"))